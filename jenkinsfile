pipeline {
    agent any
    environment {
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "localhost:8081"
        NEXUS_REPOSITORY = "ranjith-release"
        NEXUS_CREDENTIAL_ID = "nexus-jenkins"
    }

    stages {
        stage('git') {
            steps {
                
                git 'https://github.com/ranjith413/mavenweb.git'
            }

        }
        stage('Sonarqube analysis') {
            steps {
                withSonarQubeEnv('SONAR_SERVER') {
                    bat 'mvn sonar:sonar'
                }
            }
        }

        stage('Build') {
            steps {
                bat 'mvn clean package'
            }
        }
        stage("upload to Nexus Repository") {
            steps {
                script {
                    pom = readMavenPom file: "pom.xml";
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    artifactPath = filesByGlob[0].path;
                    artifactExists = fileExists artifactPath;
                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: pom.version,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]
                            ]
                        );
                    } else {
                        error "*** File: ${artifactPath}, could not be found";
                    }
                }
            }
        }
        stage('Deploy on tomcat') {
            steps {
                script {
                    deploy adapters: 
                    [tomcat9(credentialsId: 'tomcat-cred', 
                    path: '', url: 'http://localhost:8080/')], 
                    contextPath: null, 
                    onFailure: false, 
                    war: 'target/*.war'
                }
            }
        }
            
    }
    post{
        always{
            mail to: "dranjith956@gmail.com",
            subject: "jenkins build:${currentBuild.currentResult}: ${env.JOB_NAME}",
            body: "Job : ${env.JOB_NAME}\n Build Status: ${currentBuild.currentResult}:"
        }
    }
}
